app BeePretty {
  wasp: {
    version: "^0.10.3"
  },
  title: "BeePretty",
  auth: {
      userEntity: User,
      externalAuthEntity: SocialLogin,
      methods: {
        google: {},
        usernameAndPassword: {}
      },
      onAuthFailedRedirectTo: "/login"
    },
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.jsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import SignUp from "@client/SignupPage"
}

route ForgotPasswordRoute { path: "/forgot-password", to: ForgotPasswordPage }
page ForgotPasswordPage {
  component: import ForgotPassword from "@client/ForgotPasswordPage"
}

route ResetPasswordRoute { path: "/reset-password", to: ResetPasswordPage }
page ResetPasswordPage {
  component: import ResetPassword from "@client/ResetPasswordPage"
}

route VerifyEmailRoute { path: "/verify-email", to: VerifyEmailPage }
page VerifyEmailPage {
  component: import VerifyEmail from "@client/VerifyEmailPage"
}

entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
    externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}


