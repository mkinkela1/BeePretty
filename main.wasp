app BeePretty {
  wasp: {
    version: "^0.10.3"
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { devSeed } from "@server/devSeed.js",
    ]
  },
  title: "BeePretty",
  head: [
    "<meta name=\"referrer\" content=\"no-referrer\" />"
  ],
  auth: {
      userEntity: User,
      externalAuthEntity: SocialLogin,
      methods: {
        google: {},
        usernameAndPassword: {}
      },
      onAuthFailedRedirectTo: "/login",
      onAuthSucceededRedirectTo: "/app"
    },
    dependencies: [
        ("@tailwindcss/forms", "^0.5.3"),
        ("@tailwindcss/typography", "^0.5.7"),
        ("@heroicons/react", "^2.0.16"),
        ("form-data", "^4.0.0"),
        ("@faker-js/faker", "^7.6.0"),
        ("react-loading-skeleton", "^3.0.0"),
        ("react-toastify", "^9.1.2")
    ]
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.tsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage.tsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import SignUp from "@client/SignupPage.tsx"
}

route AuthenticatedMainRoute { path: "/app", to: AuthenticatedMainPage }
page AuthenticatedMainPage {
  authRequired: true,
  component: import AuthenticatedMain from "@client/AuthenticatedMainPage.tsx"
}

route BattleArenaRoute { path: "/app/battle", to: BattleArenaPage }
page BattleArenaPage {
  authRequired: true,
  component: import BattleArena from "@client/BattleArenaPage.tsx"
}

route SearchRoute { path: "/app/search", to: SearchPage }
page SearchPage {
  authRequired: true,
  component: import SearchPage from "@client/SearchPage.tsx"
}

route NotificationRoute { path: "/app/notification", to: NotificationPage }
page NotificationPage {
  authRequired: true,
  component: import Notification from "@client/NotificationPage.tsx"
}

route ProfileRoute { path: "/app/me", to: ProfilePage }
page ProfilePage {
  authRequired: true,
  component: import Profile from "@client/ProfilePage.tsx"
}

route UserProfileRoute { path: "/app/user/:id", to: UserProfilePage }
page UserProfilePage {
  authRequired: true,
  component: import UserProfilePage from "@client/UserProfilePage.tsx"
}

route SetupAccountRoute { path: "/app/setup-account", to: SetupAccountPage }
page SetupAccountPage {
  authRequired: true,
  component: import SetupAccountPage from "@client/SetupAccountPage.tsx"
}

route UploadFeaturedImageRoute { path: "/app/upload-featured-image", to: UploadFeaturedImagePage }
page UploadFeaturedImagePage {
  authRequired: true,
  component: import UploadFeaturedImagePage from "@client/UploadFeaturedImagePage.tsx"
}

route FinishSetupRoute { path: "/app/finish-setup", to: FinishSetupPage }
page FinishSetupPage {
  authRequired: true,
  component: import FinishSetupPage from "@client/FinishSetupPage.tsx"
}

entity User {=psl
    id               Int     @id @default(autoincrement())
    username         String  @unique
    password         String
    externalAuthAssociations  SocialLogin[]
    userData         UserData?
    featuredImage    FeaturedImage?
    followedBy       Follows[] @relation("following")
    following        Follows[] @relation("follower")
    challengedBy     Challenge[] @relation("challengedBy")
    challenger       Challenge[] @relation("challenger")
    posts            Post[]
    challengeVote    ChallengeVote[]
    likes            Like[]
psl=}

entity Challenge {=psl
  id               Int     @id @default(autoincrement())
  challengedBy     User    @relation("challengedBy", fields: [challengedById], references: [id])
  challengedById   Int
  challenger       User    @relation("challenger", fields: [challengerId], references: [id])
  challengerId     Int
  votes            ChallengeVote[]

  @@unique([challengedById, challengerId])
psl=}

entity ChallengeVote {=psl
    id               Int     @id @default(autoincrement())
    user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           Int
    challenge        Challenge @relation(fields: [challengeId], references: [id])
    challengeId      Int
    voteForId        Int
    @@unique([userId, challengeId])
psl=}

entity Post {=psl
    id          Int     @id @default(autoincrement())
    title       String
    imgUrl      String
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    likes       Like[]
psl=}

entity Like {=psl
    id          Int     @id @default(autoincrement())
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    post        Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      Int
psl=}

entity Follows {=psl
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

entity UserData {=psl
   id          Int     @id @default(autoincrement())
   firstName   String?
   lastName    String?
   bio         String?
   profilePic  String?
   user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId      Int
   @@unique([userId])
psl=}

entity FeaturedImage {=psl
   id          Int     @id @default(autoincrement())
   imageUrl    String?
   user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId      Int
   @@unique([userId])
psl=}

query findUsers {
  fn: import { findUsers } from "@server/users/findUsers.js",
  entities: [User, UserData]
}

query getMe {
  fn: import { getMe } from "@server/users/getMe.js",
  entities: [User, UserData, FeaturedImage, Follows]
}

query getUserById {
  fn: import { getUserById } from "@server/users/getUserById.js",
  entities: [User, UserData, FeaturedImage, Follows]
}

query getPosts {
  fn: import { getPosts } from "@server/posts/getPosts.js",
  entities: [User, Follows, Post]
}

query getPost {
  fn: import { getPost } from "@server/posts/getPost.js",
  entities: [User, UserData, Post, Like]
}

query getRandomChallenge {
  fn: import { getRandomChallenge } from "@server/challenges/getRandomChallenge.js",
  entities: [User, FeaturedImage, Challenge]
}

query getUsersChallenges {
  fn: import { getUsersChallenges } from "@server/challenges/getUsersChallenges.js",
  entities: [ChallengeVote, Challenge, User, UserData]
}

action uploadProfilePic {
  fn: import { uploadProfilePic } from "@server/users/uploadProfilePic.js",
  entities: [UserData]
}

action uploadFeaturedImage {
  fn: import { uploadFeaturedImage } from "@server/users/uploadFeaturedImage.js",
  entities: [FeaturedImage]
}

action followUser {
  fn: import { followUser } from "@server/users/followUser.js",
  entities: [Follows]
}

action unfollowUser {
  fn: import { unfollowUser } from "@server/users/unfollowUser.js",
  entities: [Follows]
}

action createPost {
  fn: import { createPost } from "@server/posts/createPost.js",
  entities: [Post]
}

action createChallenge {
  fn: import { createChallenge } from "@server/challenges/createChallenge.js",
  entities: [Challenge]
}

action createVote {
  fn: import { createVote } from "@server/challenges/createVote.js",
  entities: [ChallengeVote]
}

action likePost {
  fn: import { likePost } from "@server/posts/likePost.js",
  entities: [Post, Like]
}

action removeLike {
  fn: import { removeLike } from "@server/posts/removeLike.js",
  entities: [Post, Like]
}

action updateUser {
  fn: import { updateUser } from "@server/users/updateUser.js",
  entities: [UserData]
}

